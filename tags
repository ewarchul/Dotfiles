!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
<C-\>	init.vim	/^nnoremap <C-\\> :ArgWrap<CR>$/;"	m
<C-]>	init.vim	/^nnoremap <C-]> <C-w><C-]><C-w>T$/;"	m
<C-p>	init.vim	/^nnoremap <C-p> :FZF<CR>$/;"	m
<F8>	init.vim	/^nmap <F8> :TagbarToggle<CR>$/;"	m
<c-space>	init.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
g:NERDTreeIgnore	init.vim	/^let g:NERDTreeIgnore = []$/;"	v
g:NERDTreeShowHidden	init.vim	/^let g:NERDTreeShowHidden = 1$/;"	v
g:NERDTreeStatusline	init.vim	/^let g:NERDTreeStatusline = ''$/;"	v
g:coc_diagnostic_disable	init.vim	/^let g:coc_diagnostic_disable = 1$/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:fzf_action	init.vim	/^let g:fzf_action = {$/;"	v
g:haskell_backpack	init.vim	/^let g:haskell_backpack = 1                " to enable highlighting of backpack keywords$/;"	v
g:haskell_enable_arrowsyntax	init.vim	/^let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`$/;"	v
g:haskell_enable_pattern_synonyms	init.vim	/^let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`$/;"	v
g:haskell_enable_quantification	init.vim	/^let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`$/;"	v
g:haskell_enable_recursivedo	init.vim	/^let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`$/;"	v
g:haskell_enable_static_pointers	init.vim	/^let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`$/;"	v
g:haskell_enable_typeroles	init.vim	/^let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles$/;"	v
g:neoformat_cpp_clangformat	init.vim	/^let g:neoformat_cpp_clangformat = {$/;"	v
g:neoformat_enabled_c	init.vim	/^let g:neoformat_enabled_c = ['clangformat']$/;"	v
g:neoformat_enabled_cpp	init.vim	/^let g:neoformat_enabled_cpp = ['clangformat']$/;"	v
g:neomake_verbose	init.vim	/^let g:neomake_verbose=3$/;"	v
g:rainbow_active	init.vim	/^let g:rainbow_active = 1$/;"	v
gd	init.vim	/^nmap <silent> gd :call CocAction('jumpDefinition', 'vsplit')<CR>$/;"	m
gi	init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gs	init.vim	/^nmap <silent> gs :call CocAction('jumpDefinition', 'split')<CR>$/;"	m
gy	init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
